name: Windows Build with LLVM

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2
      
      - name: Download pre-built LLVM
        run: |
          # Download pre-built LLVM 17 (more stable than 18)
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe" -OutFile "llvm.exe"
          
          # Extract LLVM silently to C:\LLVM
          Start-Process -FilePath "llvm.exe" -ArgumentList "/S", "/D=C:\LLVM" -Wait -NoNewWindow
          
          # Verify installation
          if (Test-Path "C:\LLVM\bin\clang.exe") {
            Write-Host "LLVM installed successfully"
            echo "C:\LLVM\bin" | Out-File -Append -FilePath $env:GITHUB_PATH -Encoding utf8
          } else {
            Write-Error "LLVM installation failed"
            exit 1
          }
          
      - name: Configure CMake
        run: |
          cmake -B build -S . `
            -G "Visual Studio 17 2022" `
            -A x64 `
            -DCMAKE_BUILD_TYPE=Release `
            -DLLVM_DIR="C:\LLVM\lib\cmake\llvm" `
            -DClang_DIR="C:\LLVM\lib\cmake\clang"
            
      - name: Build
        run: cmake --build build --config Release --verbose
        
      - name: List build output
        run: |
          Get-ChildItem -Path build\bin\Release -Recurse
          
      - name: Package Windows Release
        run: |
          New-Item -ItemType Directory -Force -Path release-windows
          
          # Copy executable
          Copy-Item build\bin\Release\codemap.exe release-windows\
          
          # Copy required DLLs from LLVM
          if (Test-Path "C:\LLVM\bin\libclang.dll") {
            Copy-Item "C:\LLVM\bin\libclang.dll" release-windows\
          }
          if (Test-Path "C:\LLVM\bin\LLVM-C.dll") {
            Copy-Item "C:\LLVM\bin\LLVM-C.dll" release-windows\
          }
          
          # Copy frontend and docs
          Copy-Item -Recurse frontend release-windows\
          Copy-Item README.md release-windows\
          
          # List package contents
          Get-ChildItem -Path release-windows
          
          # Create zip archive
          Compress-Archive -Path release-windows\* -DestinationPath codemap-windows-x64.zip
          
      - name: Test executable
        run: |
          cd release-windows
          .\codemap.exe --help
          
      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: codemap-windows-x64
          path: codemap-windows-x64.zip

  build-linux:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake g++ libclang-18-dev llvm-18-dev
          
      - name: Configure CMake
        run: cmake -B build -S . -DCMAKE_BUILD_TYPE=Release
        
      - name: Build
        run: cmake --build build -j$(nproc)
        
      - name: Package Linux Release
        run: |
          mkdir -p release-linux/codemap-linux-x64
          cp build/bin/codemap release-linux/codemap-linux-x64/
          cp -r frontend release-linux/codemap-linux-x64/
          cp README.md release-linux/codemap-linux-x64/
          cd release-linux
          tar -czf ../codemap-linux-x64.tar.gz codemap-linux-x64
          cd ..
          
      - name: Upload Linux Artifact
        uses: actions/upload-artifact@v4
        with:
          name: codemap-linux-x64
          path: codemap-linux-x64.tar.gz

  create-release:
    needs: [build-windows, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: codemap-windows-x64
          
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: codemap-linux-x64
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            codemap-windows-x64.zip
            codemap-linux-x64.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Download
            
            ### Windows x64
            Download `codemap-windows-x64.zip` and extract. The package includes:
            - `codemap.exe` - Main executable
            - `libclang.dll` - Required LLVM library
            - `frontend/` - Web visualization files
            
            Run from command prompt:
            ```cmd
            codemap.exe --help
            codemap.exe C:\path\to\project
            ```
            
            ### Linux x64
            Download `codemap-linux-x64.tar.gz` and extract:
            ```bash
            tar -xzf codemap-linux-x64.tar.gz
            cd codemap-linux-x64
            ./codemap --help
            ```